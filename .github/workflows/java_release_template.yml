name: Java release template

on:
  workflow_call:
    inputs:
      env:
        default: 'main'
        required: true
        type: string
        description: The environment type pipeline is run in
      project:
        required: true
        type: string
        description: The project to run the pipeline on

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install -r scripts/semver_tool/requirements.txt

      - name: Determine version
        id: versioning
        run: |
          set +e
          VERSION=$(python scripts/semver_tool/semver_tool.py -e ${{ inputs.env }} ${{ inputs.project }})
          CODE=$?
          set -e
          
          if [ "$CODE" -eq 0 ]; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload version file
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.yaml

      - name: Upload new version release notes
        uses: actions/upload-artifact@v4
        with:
          name: version_release_notes
          path: release_notes.md

      - name: Upload main release notes
        uses: actions/upload-artifact@v4
        with:
          name: release_notes
          path: release_notes/${{ inputs.project }}.md

    outputs:
      version: ${{ steps.versioning.outputs.version }}
      release_needed: ${{ steps.versioning.outputs.release_needed }}

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: versioning
    if: needs.versioning.outputs.release_needed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Update maven version
        working-directory: ${{ inputs.project }}
        run: |
          mvn versions:set -DnewVersion=${{ needs.versioning.outputs.version }}
          mvn versions:commit

      - name: Build project
        working-directory: ${{ inputs.project }}
        run: mvn --batch-mode clean deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload updated pom.xml
        uses: actions/upload-artifact@v4
        with:
          name: pom
          path: ${{ inputs.project }}/pom.xml

      - name: Upload jar
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: ${{ inputs.project }}/target/*.jar

  release:
    runs-on: ubuntu-latest
    needs:
      - versioning
      - build
    permissions:
      contents: write
      packages: write
    if: needs.versioning.outputs.release_needed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download version file
        uses: actions/download-artifact@v4
        with:
          name: version
          path: ./

      - name: Download version release notes
        uses: actions/download-artifact@v4
        with:
          name: version_release_notes
          path: ./

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: version_release_notes
          path: release_notes/

      - name: Download pom.xml
        uses: actions/download-artifact@v4
        with:
          name: pom
          path: ${{ inputs.project }}/

      - name: Add release notes to git
        if: inputs.env == 'main'
        run: git add release_notes/${{ inputs.project }}.md

      - name: Commit version, release notes and updated pom.xml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version.yaml ${{ inputs.project }}/pom.xml
          git commit -m "chore(${{ inputs.project }}): release new version"
          git push

      - name: Create tag
        run: |
          VERSION=${{ needs.versioning.outputs.version }}
          git tag ${{ inputs.project }}_$VERSION
          git push origin ${{ inputs.project }}_$VERSION

      - name: Download jar
        uses: actions/download-artifact@v4
        with:
          name: jar
          path: ./

      - name: Determine prerelease
        id: prerelease
        run: |
          if [ ${{ inputs.env }} -eq "main" ]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.project }}_${{ needs.versioning.outputs.version }}
          name: ${{ inputs.project }} v${{ needs.versioning.outputs.version }}
          body_path: release_notes.md
          files: ${{ inputs.project }}-${{ needs.versioning.outputs.version }}.jar
          prerelease: ${{ steps.prerelease.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
